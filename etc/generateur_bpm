typedef struct		s_header
{
	unsigned char	bitmap_type[2];
	int				file_size;
	short			reserved1;
	short			reserved2;
	unsigned int	offset_bits;
}					t_header;
typedef struct		s_header2
{
	unsigned int	size_header;
	unsigned int	width;
	unsigned int	height;
	short int		planes;
	short int		bit_count;
	unsigned int	compression;
	unsigned int	image_size;
	unsigned int	ppm_x;
	unsigned int	ppm_y;
	unsigned int	clr_used;
	unsigned int	clr_important;
}					t_header2;

void	bitmap_image(t_file *file, int fd, t_header2 bih)
{
	int				x;
	int				y;
	int				ble;
	unsigned char	color[3];
	write(fd, &bih, sizeof(bih));
	y = file->height - 1;
	while (y >= 0)
	{
		x = 0;
		while (x < file->width)
		{
			ble = file->imgdata[x + y * file->width];
			color[0] = ble % 256;
			ble /= 256;
			color[1] = ble % 256;
			ble /= 256;
			color[2] = ble % 256;
			write(fd, &color, sizeof(color));
			x++;
		}
		y--;
	}
}
void	save_bitmap(const char *filename, t_file *file)
{
	int			fd;
	t_header	bfh;
	t_header2	bih;
	ft_memcpy(&bfh.bitmap_type, "BM", 2);
	bfh.file_size = file->width * file->height * 4 + 54;
	bfh.reserved1 = 0;
	bfh.reserved2 = 0;
	bfh.offset_bits = 0;
	bih.size_header = sizeof(bih);
	bih.width = file->width;
	bih.height = file->height;
	bih.planes = 1;
	bih.bit_count = 24;
	bih.compression = 0;
	bih.image_size = file->width * file->height * 4 + 54;
	bih.ppm_x = 2;
	bih.ppm_y = 2;
	bih.clr_used = 0;
	bih.clr_important = 0;
	close(open(filename, O_WRONLY | O_CREAT));
	fd = open(filename, O_RDWR);
	write(fd, &bfh, 14);
	bitmap_image(file, fd, bih);
	close(fd);
}
